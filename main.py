
# Streamlit dashboard k√≥d l√©trehoz√°sa
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Oldal konfigur√°ci√≥
st.set_page_config(
    page_title="Budapest Lak√°spiac Dashboard",
    page_icon="üè†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# C√≠msor √©s le√≠r√°s
st.title("üè† Budapest Lak√°spiac Dashboard")
st.markdown("---")

# Adatok bet√∂lt√©se
@st.cache_data
def load_data():
    # Itt a felt√∂lt√∂tt CSV f√°jlt kell beolvasni
    df = pd.read_csv(budapest_lakaspiac_osszefuzve.csv)
    
    # Oszlopnevek tiszt√≠t√°sa
    df.columns = df.columns.str.strip()
    
    # Numerikus oszlopok konvert√°l√°sa
    numeric_cols = ['Csal√°di h√°z √°tlag√°r, ezer Ft/m¬≤', 'Csal√°di h√°z √°tlag√°r darab',
                   'T√∂bblak√°sos t√°rsash√°z √°tlag√°r, ezer Ft/m¬≤', 'T√∂bblak√°sos t√°rsash√°z darab',
                   'Lak√≥telepi panel √°tlag√°r, ezer Ft/m¬≤', 'Lak√≥telepi panel darab',
                   'Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤', 'Lak√°sok √∂sszesen darab',
                   'Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %', '√âv', 'Ker√ºlet']
    
    for col in numeric_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    return df

# Adatok bet√∂lt√©se
df = load_data()

# Sidebar sz≈±r≈ëk
st.sidebar.header("üîç Sz≈±r≈ëk")

# √âv sz≈±r≈ë
years = sorted(df['√âv'].dropna().unique())
selected_years = st.sidebar.multiselect(
    "V√°lassz √©vet:",
    years,
    default=years[-3:] if len(years) >= 3 else years
)

# Ker√ºlet sz≈±r≈ë
districts = sorted(df['Ker√ºlet'].dropna().unique())
selected_districts = st.sidebar.multiselect(
    "V√°lassz ker√ºletet:",
    districts,
    default=districts[:5] if len(districts) >= 5 else districts
)

# Adatok sz≈±r√©se
filtered_df = df[
    (df['√âv'].isin(selected_years)) & 
    (df['Ker√ºlet'].isin(selected_districts))
]

# F≈ëbb metrik√°k
st.header("üìä F≈ëbb Mutat√≥k")

col1, col2, col3, col4 = st.columns(4)

with col1:
    avg_price = filtered_df['Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤'].mean()
    st.metric(
        "√Åtlagos lak√°s√°r",
        f"{avg_price:.0f} eFt/m¬≤" if not pd.isna(avg_price) else "N/A"
    )

with col2:
    total_transactions = filtered_df['Lak√°sok √∂sszesen darab'].sum()
    st.metric(
        "√ñsszes tranzakci√≥",
        f"{total_transactions:.0f}" if not pd.isna(total_transactions) else "N/A"
    )

with col3:
    avg_volatility = filtered_df['Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %'].mean()
    st.metric(
        "√Åtlagos volatilit√°s",
        f"{avg_volatility:.1f}%" if not pd.isna(avg_volatility) else "N/A"
    )

with col4:
    districts_count = len(selected_districts)
    st.metric(
        "Vizsg√°lt ker√ºletek",
        f"{districts_count}"
    )

st.markdown("---")

# T√©rk√©pes megjelen√≠t√©s
st.header("üó∫Ô∏è T√©rk√©pes √Åbr√°zol√°s")

# Ker√ºletek szerint aggreg√°lt adatok
district_summary = filtered_df.groupby('Ker√ºlet').agg({
    'Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤': 'mean',
    'Lak√°sok √∂sszesen darab': 'sum',
    'Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %': 'mean'
}).reset_index()

# Budapest ker√ºletek koordin√°t√°i (k√∂zel√≠t≈ë √©rt√©kek)
district_coords = {
    1: (47.4979, 19.0402),   # I. ker√ºlet
    2: (47.5138, 19.0267),   # II. ker√ºlet
    3: (47.5428, 19.0408),   # III. ker√ºlet
    4: (47.5615, 19.0892),   # IV. ker√ºlet
    5: (47.4969, 19.0514),   # V. ker√ºlet
    6: (47.5030, 19.0651),   # VI. ker√ºlet
    7: (47.4969, 19.0651),   # VII. ker√ºlet
    8: (47.4875, 19.0651),   # VIII. ker√ºlet
    9: (47.4875, 19.0514),   # IX. ker√ºlet
    10: (47.4781, 19.0651),  # X. ker√ºlet
    11: (47.4781, 19.0402),  # XI. ker√ºlet
    12: (47.5030, 19.0267),  # XII. ker√ºlet
    13: (47.5138, 19.0651),  # XIII. ker√ºlet
    14: (47.5245, 19.1026),  # XIV. ker√ºlet
    15: (47.4687, 19.1163),  # XV. ker√ºlet
    16: (47.5138, 19.1026),  # XVI. ker√ºlet
    17: (47.4781, 19.1300),  # XVII. ker√ºlet
    18: (47.4406, 19.1163),  # XVIII. ker√ºlet
    19: (47.4312, 19.0892),  # XIX. ker√ºlet
    20: (47.4312, 19.1026),  # XX. ker√ºlet
    21: (47.4406, 19.1437),  # XXI. ker√ºlet
    22: (47.4125, 19.0267),  # XXII. ker√ºlet
    23: (47.3937, 19.0651)   # XXIII. ker√ºlet
}

# Koordin√°t√°k hozz√°ad√°sa
district_summary['lat'] = district_summary['Ker√ºlet'].map(lambda x: district_coords.get(x, (47.5, 19.05))[0])
district_summary['lon'] = district_summary['Ker√ºlet'].map(lambda x: district_coords.get(x, (47.5, 19.05))[1])

# T√©rk√©p l√©trehoz√°sa
if not district_summary.empty:
    fig_map = px.scatter_mapbox(
        district_summary,
        lat='lat',
        lon='lon',
        size='Lak√°sok √∂sszesen darab',
        color='Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤',
        hover_name='Ker√ºlet',
        hover_data={
            'Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤': ':.0f',
            'Lak√°sok √∂sszesen darab': ':.0f',
            'Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %': ':.1f',
            'lat': False,
            'lon': False
        },
        color_continuous_scale='Viridis',
        size_max=30,
        zoom=10,
        mapbox_style='open-street-map',
        title='Lak√°s√°rak ker√ºletenk√©nt'
    )
    
    fig_map.update_layout(
        height=600,
        margin={"r":0,"t":50,"l":0,"b":0}
    )
    
    st.plotly_chart(fig_map, use_container_width=True)
else:
    st.warning("Nincs megjelen√≠thet≈ë adat a kiv√°lasztott sz≈±r≈ëkkel.")

st.markdown("---")

# Grafikonok
st.header("üìà R√©szletes Elemz√©sek")

col1, col2 = st.columns(2)

with col1:
    # √Årak alakul√°sa id≈ëben
    st.subheader("√Årak alakul√°sa id≈ëben")
    
    time_series = filtered_df.groupby(['√âv', 'Ker√ºlet'])['Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤'].mean().reset_index()
    
    if not time_series.empty:
        fig_time = px.line(
            time_series,
            x='√âv',
            y='Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤',
            color='Ker√ºlet',
            title='Lak√°s√°rak v√°ltoz√°sa ker√ºletenk√©nt'
        )
        fig_time.update_layout(height=400)
        st.plotly_chart(fig_time, use_container_width=True)
    else:
        st.warning("Nincs id≈ësor adat.")

with col2:
    # Ker√ºletek √∂sszehasonl√≠t√°sa
    st.subheader("Ker√ºletek √∂sszehasonl√≠t√°sa")
    
    district_avg = filtered_df.groupby('Ker√ºlet')['Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤'].mean().reset_index()
    district_avg = district_avg.sort_values('Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤', ascending=True)
    
    if not district_avg.empty:
        fig_bar = px.bar(
            district_avg,
            x='Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤',
            y='Ker√ºlet',
            orientation='h',
            title='√Åtlagos lak√°s√°rak ker√ºletenk√©nt'
        )
        fig_bar.update_layout(height=400)
        st.plotly_chart(fig_bar, use_container_width=True)
    else:
        st.warning("Nincs ker√ºleti adat.")

# Lak√°st√≠pusok √∂sszehasonl√≠t√°sa
st.subheader("Lak√°st√≠pusok √∂sszehasonl√≠t√°sa")

property_types = ['Csal√°di h√°z √°tlag√°r, ezer Ft/m¬≤', 
                 'T√∂bblak√°sos t√°rsash√°z √°tlag√°r, ezer Ft/m¬≤', 
                 'Lak√≥telepi panel √°tlag√°r, ezer Ft/m¬≤']

property_data = []
for prop_type in property_types:
    if prop_type in filtered_df.columns:
        avg_price = filtered_df[prop_type].mean()
        if not pd.isna(avg_price):
            property_data.append({
                'T√≠pus': prop_type.replace(' √°tlag√°r, ezer Ft/m¬≤', ''),
                '√Åtlag√°r': avg_price
            })

if property_data:
    prop_df = pd.DataFrame(property_data)
    fig_prop = px.bar(
        prop_df,
        x='T√≠pus',
        y='√Åtlag√°r',
        title='√Åtlag√°rak lak√°st√≠pusonk√©nt'
    )
    fig_prop.update_layout(height=400)
    st.plotly_chart(fig_prop, use_container_width=True)

# Volatilit√°s elemz√©s
st.subheader("Piaci Volatilit√°s")

col1, col2 = st.columns(2)

with col1:
    # Volatilit√°s hisztogram
    volatility_data = filtered_df['Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %'].dropna()
    if not volatility_data.empty:
        fig_hist = px.histogram(
            volatility_data,
            nbins=20,
            title='Volatilit√°s eloszl√°sa'
        )
        fig_hist.update_layout(height=400)
        st.plotly_chart(fig_hist, use_container_width=True)

with col2:
    # Volatilit√°s vs √°r
    scatter_data = filtered_df[['Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤', 
                               'Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %']].dropna()
    if not scatter_data.empty:
        fig_scatter = px.scatter(
            scatter_data,
            x='Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤',
            y='Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %',
            title='√År vs Volatilit√°s'
        )
        fig_scatter.update_layout(height=400)
        st.plotly_chart(fig_scatter, use_container_width=True)

# Adatt√°bla
st.header("üìã R√©szletes Adatok")

# √ñsszes√≠tett adatok megjelen√≠t√©se
summary_table = filtered_df.groupby(['Ker√ºlet', '√âv']).agg({
    'Lak√°sok √∂sszesen √°tlag√°r, ezer Ft/m¬≤': 'mean',
    'Lak√°sok √∂sszesen darab': 'sum',
    'Lak√°sok √∂sszesen relat√≠v sz√≥r√°s, %': 'mean'
}).round(2).reset_index()

st.dataframe(summary_table, use_container_width=True)

# Let√∂lt√©si lehet≈ës√©g
csv = summary_table.to_csv(index=False)
st.download_button(
    label="üì• Adatok let√∂lt√©se CSV-ben",
    data=csv,
    file_name='budapest_lakaspiac_summary.csv',
    mime='text/csv'
)

# L√°bjegyzet
st.markdown("---")
st.markdown("*Dashboard k√©sz√≠tve Streamlit seg√≠ts√©g√©vel | Adatok: Budapest lak√°spiaci adatb√°zis*")


# F√°jl ment√©se
with open('budapest_lakaspiac_dashboard.py', 'w', encoding='utf-8') as f:
    f.write(dashboard_code)

print("‚úÖ Streamlit dashboard sikeresen l√©trehozva: budapest_lakaspiac_dashboard.py")
print("\nüöÄ Futtat√°shoz haszn√°ld a k√∂vetkez≈ë parancsot:")
print("streamlit run budapest_lakaspiac_dashboard.py")
