import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import folium
from streamlit_folium import st_folium

# Oldal konfigur√°ci√≥
st.set_page_config(
    page_title="Budapest Lak√°spiac Dashboard",
    page_icon="üè†",
    layout="wide"
)

# Adatok bet√∂lt√©se
@st.cache_data
def load_data():
    df = pd.read_csv('budapest_lakaspiac_osszefuzve.csv')
    return df

# F≈ëc√≠m
st.title("üè† Budapest Lak√°spiac Elemz√©s Dashboard")
st.markdown("---")

# Adatok bet√∂lt√©se
try:
    df = load_data()
    
    # Sidebar sz≈±r≈ëk
    st.sidebar.header("Sz≈±r≈ëk")
    
    # √âv sz≈±r≈ë
    years = sorted(df['√âv'].unique())
    selected_year = st.sidebar.selectbox("V√°lassz √©vet:", years, index=len(years)-1)
    
    # Ker√ºlet sz≈±r≈ë
    districts = sorted(df['Ker√ºlet'].unique())
    selected_districts = st.sidebar.multiselect("V√°lassz ker√ºleteket:", districts, default=districts[:5])
    
    # Ingatlan t√≠pus sz≈±r≈ë
    property_types = ['Csal√°di h√°z', 'T√∂bblak√°sos t√°rsash√°z', 'Lak√≥telepi panel', 'Lak√°sok √∂sszesen']
    selected_property_type = st.sidebar.selectbox("Ingatlan t√≠pus:", property_types, index=3)
    
    # Adatok sz≈±r√©se
    filtered_df = df[
        (df['√âv'] == selected_year) & 
        (df['Ker√ºlet'].isin(selected_districts))
    ].copy()
    
    # √År oszlop kiv√°laszt√°sa
    price_column = f"{selected_property_type} √°tlag√°r, ezer Ft/m¬≤"
    count_column = f"{selected_property_type} darab"
    
    # F≈ëbb metrik√°k
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        avg_price = filtered_df[price_column].mean()
        st.metric("√Åtlag√°r", f"{avg_price:.0f} eFt/m¬≤" if not np.isnan(avg_price) else "N/A")
    
    with col2:
        max_price = filtered_df[price_column].max()
        st.metric("Legmagasabb √°r", f"{max_price:.0f} eFt/m¬≤" if not np.isnan(max_price) else "N/A")
    
    with col3:
        min_price = filtered_df[price_column].min()
        st.metric("Legalacsonyabb √°r", f"{min_price:.0f} eFt/m¬≤" if not np.isnan(min_price) else "N/A")
    
    with col4:
        total_properties = filtered_df[count_column].sum()
        st.metric("√ñsszes ingatlan", f"{total_properties:.0f}" if not np.isnan(total_properties) else "N/A")
    
    # Tabs l√©trehoz√°sa
    tab1, tab2, tab3, tab4 = st.tabs(["üìä √Åttekint√©s", "üìà Trendek", "üó∫Ô∏è Ker√ºletek", "üèòÔ∏è Utc√°k"])
    
    with tab1:
        st.header("√Åttekint√©s")
        
        # Ker√ºletek szerinti √°rak
        district_data = filtered_df.groupby('Ker√ºlet')[price_column].mean().reset_index()
        district_data = district_data.dropna()
        
        if not district_data.empty:
            fig_bar = px.bar(
                district_data, 
                x='Ker√ºlet', 
                y=price_column,
                title=f"{selected_property_type} √°tlag√°rak ker√ºletenk√©nt ({selected_year})",
                labels={price_column: '√Åtlag√°r (eFt/m¬≤)', 'Ker√ºlet': 'Ker√ºlet'}
            )
            fig_bar.update_layout(height=500)
            st.plotly_chart(fig_bar, use_container_width=True)
        
        # Top 10 legdr√°g√°bb utca
        top_streets = filtered_df.nlargest(10, price_column)[['Az ingatlan helye', price_column, 'Ker√ºlet']]
        top_streets = top_streets.dropna()
        
        if not top_streets.empty:
            st.subheader("Top 10 legdr√°g√°bb utca")
            st.dataframe(top_streets, use_container_width=True)
    
    with tab2:
        st.header("Id≈ëbeli trendek")
        
        # √âvenk√©nti √°tlag√°rak
        yearly_trends = df.groupby('√âv')[price_column].mean().reset_index()
        yearly_trends = yearly_trends.dropna()
        
        if not yearly_trends.empty:
            fig_line = px.line(
                yearly_trends, 
                x='√âv', 
                y=price_column,
                title=f"{selected_property_type} √°tlag√°r alakul√°sa",
                labels={price_column: '√Åtlag√°r (eFt/m¬≤)', '√âv': '√âv'}
            )
            fig_line.update_layout(height=500)
            st.plotly_chart(fig_line, use_container_width=True)
        
        # Ker√ºletenk√©nti trendek
        if len(selected_districts) > 1:
            district_trends = df[df['Ker√ºlet'].isin(selected_districts)].groupby(['√âv', 'Ker√ºlet'])[price_column].mean().reset_index()
            district_trends = district_trends.dropna()
            
            if not district_trends.empty:
                fig_multi_line = px.line(
                    district_trends, 
                    x='√âv', 
                    y=price_column,
                    color='Ker√ºlet',
                    title=f"{selected_property_type} √°tlag√°r alakul√°sa ker√ºletenk√©nt",
                    labels={price_column: '√Åtlag√°r (eFt/m¬≤)', '√âv': '√âv'}
                )
                fig_multi_line.update_layout(height=500)
                st.plotly_chart(fig_multi_line, use_container_width=True)
    
    with tab3:
        st.header("Ker√ºletek elemz√©se")
        
        # Ker√ºletek √∂sszehasonl√≠t√°sa
        district_comparison = df[df['√âv'] == selected_year].groupby('Ker√ºlet').agg({
            price_column: 'mean',
            count_column: 'sum'
        }).reset_index()
        district_comparison = district_comparison.dropna()
        
        if not district_comparison.empty:
            col1, col2 = st.columns(2)
            
            with col1:
                fig_scatter = px.scatter(
                    district_comparison,
                    x=count_column,
                    y=price_column,
                    size=count_column,
                    hover_data=['Ker√ºlet'],
                    title="√År vs. Mennyis√©g ker√ºletenk√©nt",
                    labels={price_column: '√Åtlag√°r (eFt/m¬≤)', count_column: 'Ingatlanok sz√°ma'}
                )
                st.plotly_chart(fig_scatter, use_container_width=True)
            
            with col2:
                fig_pie = px.pie(
                    district_comparison,
                    values=count_column,
                    names='Ker√ºlet',
                    title="Ingatlanok megoszl√°sa ker√ºletenk√©nt"
                )
                st.plotly_chart(fig_pie, use_container_width=True)
    
    with tab4:
        st.header("Utc√°k elemz√©se")
        
        # Utc√°k list√°ja a kiv√°lasztott ker√ºletekben
        street_data = filtered_df[['Az ingatlan helye', price_column, count_column, 'Ker√ºlet']].copy()
        street_data = street_data.dropna()
        
        if not street_data.empty:
            # Keres√©s az utc√°k k√∂z√∂tt
            search_term = st.text_input("Keres√©s utca neve alapj√°n:")
            
            if search_term:
                street_data = street_data[street_data['Az ingatlan helye'].str.contains(search_term, case=False, na=False)]
            
            # Rendez√©si opci√≥k
            sort_option = st.selectbox("Rendez√©s:", ["√År szerint (cs√∂kken≈ë)", "√År szerint (n√∂vekv≈ë)", "N√©v szerint"])
            
            if sort_option == "√År szerint (cs√∂kken≈ë)":
                street_data = street_data.sort_values(price_column, ascending=False)
            elif sort_option == "√År szerint (n√∂vekv≈ë)":
                street_data = street_data.sort_values(price_column, ascending=True)
            else:
                street_data = street_data.sort_values('Az ingatlan helye')
            
            st.dataframe(street_data, use_container_width=True)
            
            # Statisztik√°k
            st.subheader("Statisztik√°k")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Utc√°k sz√°ma", len(street_data))
            with col2:
                st.metric("√Åtlag√°r", f"{street_data[price_column].mean():.0f} eFt/m¬≤")
            with col3:
                st.metric("Medi√°n √°r", f"{street_data[price_column].median():.0f} eFt/m¬≤")

except FileNotFoundError:
    st.error("A 'budapest_lakaspiac_osszefuzve.csv' f√°jl nem tal√°lhat√≥. K√©rlek, gy≈ëz≈ëdj meg r√≥la, hogy a f√°jl a megfelel≈ë helyen van.")
except Exception as e:
    st.error(f"Hiba t√∂rt√©nt az adatok bet√∂lt√©se sor√°n: {str(e)}")

# Footer
st.markdown("---")
st.markdown("üìä Budapest Lak√°spiac Dashboard | Adatok forr√°sa: budapest_lakaspiac_osszefuzve.csv")
